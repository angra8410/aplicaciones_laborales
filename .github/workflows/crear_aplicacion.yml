name: Crear carpeta de nueva aplicaci√≥n laboral

on:
  push:
    paths:
      - 'to_process/*.yaml'
permissions:
  contents: write
  issues: write
  repository-projects: write

jobs:
  crear-carpeta-aplicacion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Instalar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependencias
        run: |
          pip install pyyaml requests

      - name: Instalar pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Instalar LaTeX (paquetes recomendados)
        run: sudo apt-get update && sudo apt-get install -y texlive-latex-recommended texlive-xetex texlive-fonts-recommended texlive-latex-extra

      - name: Procesar archivo de nueva aplicaci√≥n
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in to_process/*.yaml; do
            python aplicaciones_laborales/scripts/procesar_aplicacion.py "$file"
          done

      - name: Validar configuraci√≥n de repositorio destino
        id: check_target_repo
        env:
          # Use PAT_APLICACION_LABORAL for cross-repo access to private repos, fallback to GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.PAT_APLICACION_LABORAL || secrets.GITHUB_TOKEN }}
        run: |
          TARGET_REPO="angra8410/todas-mis-aplicaciones"
          echo "Verificando si el repositorio destino existe..."
          echo ""
          
          # Check which token is being used
          if [ -n "${{ secrets.PAT_APLICACION_LABORAL }}" ]; then
            echo "üîë Usando PAT_APLICACION_LABORAL para acceso cross-repo"
          else
            echo "‚ö†Ô∏è  Usando GITHUB_TOKEN (puede no funcionar con repos privados)"
          fi
          echo ""

          # Check if the repository exists using GitHub API
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO")
          
          echo "üìä C√≥digo de respuesta HTTP: $HTTP_CODE"
          echo ""

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Repositorio destino encontrado y accesible: $TARGET_REPO"
            echo "repo_exists=true" >> $GITHUB_OUTPUT
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "‚ùå ERROR: Repositorio no encontrado (HTTP 404)"
            echo "   Repositorio: $TARGET_REPO"
            echo ""
            echo "üìã ACCI√ìN REQUERIDA:"
            echo "   1. Verifica que el repositorio existe en:"
            echo "      https://github.com/$TARGET_REPO"
            echo "   2. Si es privado, configura PAT_APLICACION_LABORAL en secrets"
            echo "   3. Revisa SETUP_REQUIRED.md para instrucciones completas"
            echo ""
            echo "repo_exists=false" >> $GITHUB_OUTPUT
          elif [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "403" ]; then
            echo "‚ùå ERROR: Problema de autenticaci√≥n/permisos (HTTP $HTTP_CODE)"
            echo "   Repositorio: $TARGET_REPO"
            echo ""
            echo "üìã ACCI√ìN REQUERIDA:"
            echo "   El repositorio existe pero no es accesible con el token actual."
            echo ""
            echo "   Para repositorios PRIVADOS, debes configurar un PAT:"
            echo "   1. Crea un Personal Access Token en:"
            echo "      https://github.com/settings/tokens/new"
            echo "   2. Permisos requeridos: 'repo' (acceso completo a repos privados)"
            echo "   3. Agrega el token como secret 'PAT_APLICACION_LABORAL' en:"
            echo "      https://github.com/angra8410/aplicaciones_laborales/settings/secrets/actions"
            echo "   4. Revisa SETUP_REQUIRED.md secci√≥n 'Configurar PAT' para detalles"
            echo ""
            echo "repo_exists=false" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  ADVERTENCIA: Error inesperado (HTTP $HTTP_CODE)"
            echo "   Repositorio: $TARGET_REPO"
            echo ""
            echo "repo_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Copiar CV PDF a repositorio todas-mis-aplicaciones
        if: steps.check_target_repo.outputs.repo_exists == 'true'
        env:
          # Use PAT_APLICACION_LABORAL for cross-repo access to private repos, fallback to GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.PAT_APLICACION_LABORAL || secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Iniciando copia de PDFs al repositorio todas-mis-aplicaciones"
          echo ""
          
          # Find the most recently created folder in to_process_procesados
          for folder in to_process_procesados/*/; do
            if [ -d "$folder" ]; then
              folder_name=$(basename "$folder")
              # Skip if it's just the YAML file
              if [[ "$folder_name" != *.yaml ]]; then
                echo "üìÅ Procesando copia de PDF para: $folder_name"
                python aplicaciones_laborales/scripts/copy_pdf_to_documents_repo.py "$folder_name" || echo "‚ö†Ô∏è  Advertencia: No se pudo copiar PDF para $folder_name"
                echo ""
              fi
            fi
          done
          
          echo "‚úÖ Proceso de copia de PDFs completado"

      - name: Commit y push de cambios
        run: |
          # Configure git user
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Stage all changes
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "‚úÖ Sin cambios para commitear. Workflow completado exitosamente."
            exit 0
          fi
          
          # Commit changes
          git commit -m "Automatizaci√≥n: Nueva aplicaci√≥n laboral creada por workflow"
          echo "‚úÖ Commit creado exitosamente"
          echo ""
          
          # Pull-rebase-push strategy with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          PUSH_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = false ]; do
            echo "üìä Intento de push $((RETRY_COUNT + 1))/$MAX_RETRIES"
            echo ""
            
            # Show current state before pull
            echo "üìã Estado actual del repositorio:"
            git --no-pager log --oneline -3
            echo ""
            
            # Fetch remote changes
            echo "üîÑ Obteniendo cambios remotos..."
            git fetch origin main
            echo ""
            
            # Check if there are remote changes
            LOCAL_COMMIT=$(git rev-parse HEAD)
            REMOTE_COMMIT=$(git rev-parse origin/main)
            
            if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
              echo "‚ö†Ô∏è  Se detectaron cambios remotos. Aplicando rebase..."
              echo "   Local:  $LOCAL_COMMIT"
              echo "   Remote: $REMOTE_COMMIT"
              echo ""
              
              # Rebase local commits on top of remote changes
              if git rebase origin/main; then
                echo "‚úÖ Rebase exitoso"
                echo ""
              else
                echo "‚ùå ERROR: Conflicto durante el rebase"
                echo ""
                echo "üìã Estado del rebase:"
                git status
                echo ""
                echo "üìã Archivos en conflicto:"
                git diff --name-only --diff-filter=U || echo "No se pudieron listar los archivos en conflicto"
                echo ""
                
                # Abort the rebase and fail
                git rebase --abort
                echo "‚ùå Rebase abortado. Se requiere intervenci√≥n manual."
                echo ""
                echo "üîç ACCI√ìN REQUERIDA:"
                echo "   El workflow encontr√≥ conflictos que no puede resolver autom√°ticamente."
                echo "   Esto puede ocurrir si:"
                echo "   1. M√∫ltiples workflows modifican los mismos archivos simult√°neamente"
                echo "   2. Hubo commits manuales que modifican los mismos archivos"
                echo ""
                echo "   Recomendaciones:"
                echo "   1. Revisa los logs del workflow para identificar los archivos en conflicto"
                echo "   2. Si hay workflows ejecut√°ndose en paralelo, espera a que terminen"
                echo "   3. Considera espaciar los commits que activan el workflow"
                exit 1
              fi
            else
              echo "‚úÖ Repositorio local est√° sincronizado con el remoto"
              echo ""
            fi
            
            # Attempt to push
            echo "üöÄ Intentando push..."
            if git push origin HEAD:main; then
              echo "‚úÖ Push exitoso!"
              PUSH_SUCCESS=true
            else
              PUSH_EXIT_CODE=$?
              echo "‚ùå Push fall√≥ con c√≥digo de salida: $PUSH_EXIT_CODE"
              echo ""
              
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # Exponential backoff: 5s, 10s, 20s
                WAIT_TIME=$((5 * (2 ** (RETRY_COUNT - 1))))
                echo "‚è≥ Esperando ${WAIT_TIME} segundos antes del siguiente intento..."
                sleep $WAIT_TIME
                echo ""
              fi
            fi
          done
          
          # Check final result
          if [ "$PUSH_SUCCESS" = false ]; then
            echo ""
            echo "‚ùå ERROR: No se pudo completar el push despu√©s de $MAX_RETRIES intentos"
            echo ""
            echo "üìã Diagn√≥stico final:"
            echo "   Esto puede indicar:"
            echo "   1. Conflictos persistentes que requieren resoluci√≥n manual"
            echo "   2. Problemas de permisos en el repositorio"
            echo "   3. M√∫ltiples workflows ejecut√°ndose concurrentemente"
            echo ""
            echo "üîç Siguiente pasos:"
            echo "   1. Revisa los logs completos del workflow"
            echo "   2. Verifica que no hay otros workflows ejecut√°ndose"
            echo "   3. Comprueba los permisos del GITHUB_TOKEN"
            echo "   4. Si el problema persiste, considera ejecutar el push manualmente"
            exit 1
          fi
          
          echo ""
          echo "üéâ Workflow completado exitosamente!"
          echo "üìã Estado final:"
          git --no-pager log --oneline -3
