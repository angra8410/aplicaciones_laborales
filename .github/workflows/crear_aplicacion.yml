name: Crear carpeta de nueva aplicaci√≥n laboral

on:
  push:
    paths:
      - 'to_process/*.yaml'

permissions:
  contents: write
  issues: write
  repository-projects: write

concurrency:
  group: crear-carpeta-aplicacion-laboral-main
  cancel-in-progress: true

jobs:
  crear-carpeta-aplicacion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Instalar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependencias
        run: |
          pip install pyyaml requests

      - name: Instalar pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Instalar LaTeX (paquetes recomendados)
        run: sudo apt-get update && sudo apt-get install -y texlive-latex-recommended texlive-xetex texlive-fonts-recommended texlive-latex-extra

      - name: Procesar archivo de nueva aplicaci√≥n
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in to_process/*.yaml; do
            python aplicaciones_laborales/scripts/procesar_aplicacion.py "$file"
          done

      - name: Validar configuraci√≥n de repositorio destino
        id: check_target_repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_APLICACION_LABORAL || secrets.GITHUB_TOKEN }}
        run: |
          TARGET_REPO="angra8410/todas-mis-aplicaciones"
          echo "Verificando si el repositorio destino existe..."
          if [ -n "${{ secrets.PAT_APLICACION_LABORAL }}" ]; then
            echo "üîë Usando PAT_APLICACION_LABORAL para acceso cross-repo"
          else
            echo "‚ö†Ô∏è  Usando GITHUB_TOKEN (puede no funcionar con repos privados)"
          fi
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "repo_exists=true" >> $GITHUB_OUTPUT
          else
            echo "repo_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Copiar CV PDF a repositorio todas-mis-aplicaciones
        if: steps.check_target_repo.outputs.repo_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_APLICACION_LABORAL || secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Iniciando copia de PDFs al repositorio todas-mis-aplicaciones"
          for folder in to_process_procesados/*/; do
            if [ -d "$folder" ]; then
              folder_name=$(basename "$folder")
              if [[ "$folder_name" != *.yaml ]]; then
                echo "üìÅ Procesando copia de PDF para: $folder_name"
                python aplicaciones_laborales/scripts/copy_pdf_to_documents_repo.py "$folder_name" || echo "‚ö†Ô∏è  Advertencia: No se pudo copiar PDF para $folder_name"
              fi
            fi
          done
          echo "‚úÖ Proceso de copia de PDFs completado"

      - name: Commit y push de cambios
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          if git diff --staged --quiet; then
            echo "‚úÖ Sin cambios para commitear. Workflow completado exitosamente."
            exit 0
          fi
          git commit -m "Automatizaci√≥n: Nueva aplicaci√≥n laboral creada por workflow"

          # Prevenci√≥n y manejo de ejecuciones concurrentes con pull/merge/push seguro
          # Se usa merge en lugar de rebase para evitar conflictos add/add con archivos generados
          MAX_RETRIES=3
          RETRY_COUNT=0
          PUSH_SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = false ]; do
            echo "üìä Intento de push $((RETRY_COUNT + 1))/$MAX_RETRIES"
            git fetch origin main
            LOCAL_COMMIT=$(git rev-parse HEAD)
            REMOTE_COMMIT=$(git rev-parse origin/main)
            if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
              echo "‚ö†Ô∏è  Se detectaron cambios remotos. Aplicando merge con estrategia ours para archivos generados..."
              # Use merge instead of rebase to avoid add/add conflicts
              # The -X ours strategy favors our changes in case of conflicts
              if git merge origin/main -m "Merge remote changes" --no-edit; then
                echo "‚úÖ Merge exitoso"
              else
                echo "‚ö†Ô∏è  Conflicto durante el merge. Intentando resoluci√≥n autom√°tica..."
                # For generated files in to_process_procesados, accept ours (current changes)
                # since filenames are now unique with timestamps
                git checkout --ours to_process_procesados/ || true
                git add to_process_procesados/ || true
                
                # Complete the merge
                if git commit --no-edit -m "Automatizaci√≥n: Resoluci√≥n autom√°tica de conflictos en archivos generados"; then
                  echo "‚úÖ Conflictos resueltos autom√°ticamente"
                else
                  echo "‚ùå ERROR: No se pudieron resolver los conflictos autom√°ticamente"
                  git merge --abort || true
                  echo "‚ùå Merge abortado. Se requiere intervenci√≥n manual."
                  exit 1
                fi
              fi
            fi
            if git push origin HEAD:main; then
              echo "‚úÖ Push exitoso!"
              PUSH_SUCCESS=true
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              WAIT_TIME=$((5 * (2 ** (RETRY_COUNT - 1))))
              echo "‚è≥ Esperando ${WAIT_TIME} segundos antes del siguiente intento..."
              sleep $WAIT_TIME
            fi
          done
          if [ "$PUSH_SUCCESS" = false ]; then
            echo "‚ùå ERROR: No se pudo completar el push despu√©s de $MAX_RETRIES intentos"
            exit 1
          fi
          echo "üéâ Workflow completado exitosamente!"
